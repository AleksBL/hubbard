{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sisl\n",
    "import numpy as np\n",
    "from hubbard import HubbardHamiltonian, sp2, density, plot\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Periodic structures (perfect crystals, Bloch's theorem)\n",
    "\n",
    "In this example we study the effect of on-site Coulomb interactions for electrons in periodic systems by solving the mean-field Hubbard equation.\n",
    "\n",
    "We will start by building the geometry and the TB Hamiltonian for a 1D periodic chain of Carbon atoms using `sisl`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 4.  0.  0.]\n",
      " [ 0.  2.  0.]\n",
      " [ 0.  0. 10.]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 216x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Build sisl.Geometry object for a periodic 1D chain of Carbon atoms\n",
    "geom = sisl.Geometry([[0,0,0], [2,0,0]], atoms=sisl.Atom(6), sc=[4,2,10])\n",
    "print(geom.cell)\n",
    "geom.set_nsc([3,3,1])\n",
    "\n",
    "# Plot geometry of unit cell\n",
    "p = plot.GeometryPlot(geom, cmap='Greys', figsize=(3,2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We firstly build the TB `sisl.Hamiltonian` of `dim=2` (for spin polarized calculations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 0)\t-2.0\n",
      "  (0, 1)\t-2.0\n",
      "  (1, 0)\t-2.0\n",
      "  (1, 1)\t-2.0\n"
     ]
    }
   ],
   "source": [
    "# Build sisl.Hamiltonian object using sisl\n",
    "H0 = sisl.Hamiltonian(geom, dim=2)\n",
    "for ia in geom:\n",
    "    idx = geom.close(ia, R=(0,2))\n",
    "    H0[ia, idx[0]] = 0\n",
    "    H0[ia, idx[1]] = -1.\n",
    "print(H0.Hk())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now one can build the `HubbardHamiltonian` object, which enables the routines stored in this class to converge the mean-field Hubbard Hamiltonian to find the self-consistent solution. To model the interaction part (Hubbard term) we will use `U=3.5` eV. \n",
    "In this case, since the system has periodic boundary conditions, the Hamiltonian will be diagonalized per $\\mathbf k$-point to find the spin-densities. To do so one just need to pass the argument `nkpt=[nkx, nky, nkz]` when creating the `HubabrdHamiltonian(...)` object. This argument will set the number of $\\mathbf k$-points along each direction in which the Hamiltonian will be sampled in k-space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the HubbardHamiltonian object with U=3.5 at room temperature\n",
    "HH = HubbardHamiltonian(H0, nkpt=[100,100,1], U=5, kT=0.025, q=(1,1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As in [this example](https://dipc-cc.github.io/hubbard/docs/latest/examples/molecules.html) one has to break symmetry between up and down electrons so the program can find a self-consistent solution. To do so we can place one up electron on site 0 and one down electron on site 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "HH.set_polarization([0],[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can start the convergence until we find the self-consistent solution up to a desired tolerance (`tol`) by calling the `hubb.HubbardHamiltonian.converge` method. This method needs of another method to tell the code how to build the spin-densities. For instance, to compute the spin-densities for TB Hamiltonians with finite or periodic boundary conditions, one could use the method `density.calc_n`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   HubbardHamiltonian: converge towards tol=1.00e-10\n",
      "   10 iterations completed: 0.0004688129683559916 -0.7035817467298917\n",
      "   20 iterations completed: 2.2890299016253834e-06 -0.7271787223955706\n",
      "   30 iterations completed: 8.681944052568724e-13 -0.7297765904373474\n",
      "   found solution in 30 iterations\n"
     ]
    }
   ],
   "source": [
    "# Converge until a tolerance of tol=1e-10, print info each 10 iterations (this process may take a few seconds)\n",
    "dn = HH.converge(density.calc_n, tol=1e-10, print_info=True, steps=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Also we can visualize some meaningful physical quantities and properties of the solution, e.g. such as the spin polarization of the unit-cell. Other interesting electronic properties can be visualized using the `hubbard.plot` module.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's visualize some relevant physical quantities of the final result (this process may take a few seconds)\n",
    "p = plot.SpinPolarization(HH, colorbar=True, vmax=0.4, vmin=-0.4, figsize=(4,3))\n",
    "p.annotate(size=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Shift Hamiltonian with Fermi level to have it aligned to zero\n",
    "HH.shift(-HH.fermi_level())\n",
    "\n",
    "# Calculate bands for the bare TB Hamiltonian\n",
    "band_0 = sisl.BandStructure(H0, [[0., 0., 0.], [1./2, 0., 0.], [1./2, 1./2, 0.], [0.,0.,0.]], 301, [r'$\\Gamma$', 'X', 'M', r'$\\Gamma$'])\n",
    "# Also for the converged MFH Hamiltonian\n",
    "band_MFH = sisl.BandStructure(HH.H, [[0., 0., 0.], [1./2, 0., 0.], [1./2, 1./2, 0.], [0.,0.,0.]], 301, [r'$\\Gamma$', 'X', 'M', r'$\\Gamma$'])\n",
    "\n",
    "# Calculate eigenvalues of the band-structure\n",
    "eigs_0 = band_0.eigh()\n",
    "eigs_MFH = band_MFH.eigh()\n",
    "\n",
    "# Plot them\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(4,5))\n",
    "plt.xlabel('k', size=16)\n",
    "plt.ylabel(r'$E_{nk}-E_{F}$', size=16)\n",
    "\n",
    "# Generate linear-k for plotting (ensures correct spacing)\n",
    "lband = band_0.lineark()\n",
    "for i in range(eigs_0.shape[1]):\n",
    "    plt.plot(lband, eigs_0[:, i], 'k--')\n",
    "    plt.plot(lband, eigs_MFH[:, i], 'r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
